import os
import json
import requests
from flask import Flask, request, jsonify
from telebot import TeleBot

# --- 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ë–ê–ó–ê –î–ê–ù–ù–´–• ---
BOT_TOKEN = os.environ.get("BOT_TOKEN") 
WEBHOOK_BASE_URL = "https://your-public-server.com" # !!! –ó–ê–ú–ï–ù–ò–¢–ï !!!
WEBHOOK_PATH = "/telegram_stars_webhook"
TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}/"

# –í–†–ï–ú–ï–ù–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ SQLite/PostgreSQL)
# –ö–ª—é—á: user_id (int), –ó–Ω–∞—á–µ–Ω–∏–µ: –°–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö item_id (list of str)
PURCHASES = {} 

app = Flask(__name__)
bot = TeleBot(BOT_TOKEN) 

PRODUCTS = {
    "Fighter_Star_1": {
        "title": "–ù–∏–Ω–¥–∑—è-–±–æ–µ—Ü (1 –ó–≤–µ–∑–¥–∞)",
        "description": "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–ª–∏—Ç–Ω–æ–≥–æ –±–æ–π—Ü–∞",
        "price_stars": 1,
        "payload": "purchase_fighter_star_1" 
    }
}

# ----------------------------------------------------------------------
# –≠–ù–î–ü–û–ò–ù–¢ 1: –°–û–ó–î–ê–ù–ò–ï –°–°–´–õ–ö–ò –ù–ê –°–ß–ï–¢ (–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ Unity)
# ----------------------------------------------------------------------
@app.route('/api/create_invoice', methods=['POST'])
def create_invoice():
    data = request.json
    fighter_id = data.get('fighter_id')
    user_id = data.get('user_id') 

    if fighter_id not in PRODUCTS or not user_id:
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID –±–æ–π—Ü–∞ –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}), 400

    product = PRODUCTS[fighter_id]
    
    params = {
        "title": product["title"],
        "description": product["description"],
        "payload": f"{user_id}_{product['payload']}", 
        "currency": "XTR", 
        "prices": json.dumps([{"label": product["title"], "amount": product["price_stars"] * 100}]) 
    }
    
    try:
        response = requests.get(TELEGRAM_API_URL + "createInvoiceLink", params=params)
        response.raise_for_status() 
        result = response.json()
        
        if result.get('ok') and result.get('result'):
            invoice_link = result['result']
            return jsonify({"invoice_url": invoice_link}), 200
        else:
            return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ Telegram"}), 500

    except Exception as e:
        return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

# ----------------------------------------------------------------------
# –≠–ù–î–ü–û–ò–ù–¢ 2: –í–ï–ë–•–£–ö –î–õ–Ø –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –û–ü–õ–ê–¢–´ (–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ Telegram)
# ----------------------------------------------------------------------
@app.route(WEBHOOK_PATH, methods=['POST'])
def telegram_webhook():
    update = request.get_json()
    
    if 'message' in update and 'successful_payment' in update['message']:
        payment_info = update['message']['successful_payment']
        chat_id = update['message']['chat']['id']
        payload = payment_info['invoice_payload']
        
        try:
            user_id_str, item_id = payload.split('_', 1)
            user_id = int(user_id_str)
            
            # 1. –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–ê–ó–£ –î–ê–ù–ù–´–• (–°–∞–º—ã–π –≤–∞–∂–Ω—ã–π —à–∞–≥)
            if user_id not in PURCHASES:
                PURCHASES[user_id] = []
            
            if item_id not in PURCHASES[user_id]:
                PURCHASES[user_id].append(item_id)
                
            print(f"–£–°–ü–ï–• WEBHOOK: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, –¢–æ–≤–∞—Ä: {item_id}. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            
            bot.send_message(chat_id, text=f"üéâ –í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ '{item_id}' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            
    return 'ok'

# ----------------------------------------------------------------------
# –≠–ù–î–ü–û–ò–ù–¢ 3: –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê (–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ Unity –¥–ª—è –æ–ø—Ä–æ—Å–∞)
# ----------------------------------------------------------------------
@app.route('/api/check_purchase', methods=['POST'])
def check_purchase():
    data = request.json
    try:
        user_id = int(data.get('user_id'))
        item_id = data.get('item_id')
    except (TypeError, ValueError):
        return jsonify({"status": "error", "message": "Invalid user_id"}), 400
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à–µ–π "–±–∞–∑–µ"
    is_purchased = user_id in PURCHASES and item_id in PURCHASES.get(user_id, [])
    
    return jsonify({
        "status": "success",
        "purchased": is_purchased,
        "item_id": item_id
    }), 200


# ----------------------------------------------------------------------
# –ù–ê–°–¢–†–û–ô–ö–ê –°–ï–†–í–ï–†–ê
# ----------------------------------------------------------------------
@app.route("/set_webhook")
def set_webhook_route():
    # ... (–∫–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞) ...
    pass 

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
